#!/usr/bin/ruby1.9
# We need pathname to make it work with sym-links
require 'pathname' 
require Pathname.new(__FILE__).realpath + '../../lib/boot'

# configure approot
Configs.set :root  => Pathname.new(__FILE__).realpath + '../..'

# Program Flow
# ------------
# ![Program flow](img/md_total_flow.svg)
#
# 1. {#setup_application Prepare Doc.js} - Read configurations and setup application environment
# 2. {Processor.prepare_documents Process Markdown Documents} - Read the optional markdown-documents and add them to the internal 
#    datastructure.
# 3. {Parser::Parser Process JavaScript Files} - Parse JavaScript-Files and add the found comments to the Dom. 
#    Afterwards process the tokens within the comments.
# 4. {Generator::Generator Render Templates} - Apply the Outputgenerators and save the rendered templates to disk
# 5. Copy static resources - Finalize the output and copy the javascript, images and stylesheets to 
#    the output-directory
#
# The {Processor} is the central module, which controls the workflow described above. It separates
# the tasks into different stages, which are performed one after another. (You can see this in
# the source-code of {DocJs#docjs})
#
# The Command Line Interface
# --------------------------
# The `DocJs`-class serves as command line interface (cli) and therefore extends Thor. It allows us 
# to create tasks, which then in turn can be called from the command line.
# This way every instance method of `DocJs` will be turned into a commandline task.
#
#     docjs help configure
#
# Will create an instance of DocJs and call the {#help} method on it. (Which results in the help screen
# being displayed). As help expects one argument 'configure' is passed to the call of `help`. All 
# additional commandline arguments would be parsed by Thor and added to the instance variable 
# `configs`.
#
# The Internal Datastructure
# --------------------------
# All parsed CodeObjects (i.e. comments found in your JavaScript-soures) are internally represented
# as a Dom-Tree. They can be accessed via {Dom.root}
#
# Also all Markdown-Documents are stored in the same Dom-tree, but under a different root-node called
# {Dom.docs}.
#
# For more information about storing and retreiving Data in DocJs see {Dom}.
#
#
# @see https://github.com/wycats/thor/wiki
# @see Processor
#
# @note options declared in a docjs.yml will override command-line ones
# @note for more information about the **instance methods** please type `docjs help` or 
#   `docjs help TASK` into your commandline or reference the {file:README.md#Guides guides}.
class DocJs < Thor
  
  include Thor::Actions
      
  desc "CONFIG_FILE", "Starts documentation process"
  set_options :files =>
                  { :type => :array,  :aliases => '-f', :default => [] },
               
              :docs =>
                  { :type => :array,  :aliases => '-d', :default => ['README.md'] },
  
              :output =>
                  { :type => :string, :aliases => '-o', :default => 'out' },
                  
              :templates =>
                  { :type => :string, :aliases => '-t', :default => Configs.root + 'templates' },
                  
              :appname =>
                  { :type => :string, :aliases => '-n', :default => "MyAppName" },
                  
              :logfile =>
                  { :type => :string, :aliases => '-lf' },
                  
              :loglevel =>
                  { :type => :string, :aliases => '-ll', :default => 'info' }
  def docjs(config_file = nil)
    
    # Process the given command-line and yml-options
    # @see Thor#merge_options
    configs = config_file ? merge_options(options, config_file) : options
    
    begin
      
      # PREPARE DOCJS
    
      # Setup Logger and Configs
      setup_application configs
      
      Logger.info "Loading Application-Templates"
      load_templates
      
      # Config Thor path-settings
      DocJs.source_root(Configs.templates)
      self.destination_root = Configs.output
      
      
      # PROCESS MARKDOWN DOCUMENTS
      Processor.prepare_documents     # Stage #1
      
      # PROCESS JAVASCRIPT FILES
      Processor.process_files_to_dom  # Stage #2
      
      # RENDER TEMPLATES
      Processor.start_generators      # Stage #3
      
        
      # COPY STATIC RESOURCES
      Logger.info "Copying template resources to output"
      directory 'resources/img', './img'
      directory 'resources/css', './css'
      directory 'resources/js', './js'
    
    # Print error on console, if something bad happend  
    rescue Exception => error
      Logger.error error.message + "\n" + error.backtrace.map{|l| "  #{l}" }.join("\n")
    end    
  end  



  def help(task = nil)
  
    # Introduction
    unless task
      say "Welcome to Doc.js", :bold
      say "If you are using Doc.js for the first time in your project, you may want to create a config file (like docjs.yml)
A guided wizard can help you achieving this goal - Simply run the following command:
    docjs configure
\n
After creating a config-file (like docjs.yml) the documentation can be generated by running:
    docjs docjs.yml

For further information, please visit http://b-studios.github.com/doc.js\n\n"

      self.class.help(shell, false)
      
    # Help for a specific task
    else
      self.class.task_help(shell, task)    
    end
  end


  
  desc "configure [NEW_CONFIGFILE]", "Helps you creating your docjs.yml to start off with doc.js"
  def configure(output_file = "docjs.yml", preconfigured = {})
    
    build = {
      'files'     => [],
      'docs'      => []
    }
    
    build.merge! preconfigured
    
    say "\nPlease enter the name of your App", :bold
    build['appname'] = ask ">"
  
    say "\nPlease enter the javascript-files you want to integrate into your documentation", :bold
    say "(You will be asked multiple times, unless your answer is empty) You also can specify a file-matching pattern, foo/**/*.js"
    
    while true do
      answer = ask ">"
      break if answer == ""
      build['files'] << answer
    end
    
    say "\nPlease enter the markdown-documentation-files you want to integrate into your documentation", :bold
    say "(You will be asked multiple times, unless your answer is empty) You also can specify a file-matching pattern, like docs/*.md"
    
    while true do
      answer = ask ">"
      break if answer == ""
      build['docs'] << answer
    end
    
    if not build['templates'] and yes? "Are you using your own templates?"
      say "\nPlease enter the path to your templates", :bold
      build['templates'] = ask ">"
    end
    
    if not build['output']
      say "\nWhere do you wan't your documentation generated to? Please enter a path", :bold
      build['output'] = ask ">"
    end
    
    if not build['loglevel']
      say "\nPlease specify the loglevel of your output: (error|warn|info|debug)", :bold
      
      while true do
        answer = ask ">"
        if %w(error warn info debug).include? answer
          build['loglevel'] = answer
          break
        end
        say "\nThe answer you've given is not one of (error|warn|info|debug). Please try again", :bold
      end          
    end
    
    if not build['logfile'] and yes? "Do you wan't to save your logs to a file?"
      say "\nPlease enter the path to your logfile", :bold
      build['logfile'] = ask ">"
    end
    
    # answers[:scss_build] = yes? "Do you wan't to integrate SCSS into your build-process? #{yes_no}"
    
    # maybe ask some more information to generate build.yml
    create_file output_file, build.to_yaml
  end


  
  desc "scaffold OUTPUT_DIR", "You can use scaffolding to get the templates and some basic ruby-files, that you will need to create your own templates"
  set_options :logfile =>
                  { :type => :string, :aliases => '-lf', :default => 'jsdoc.log' },
                  
              :loglevel =>
                  { :type => :string, :aliases => '-ll', :default => 'info' }
  def scaffold(output_dir)
      
    setup_application options.merge({
      :output => output_dir,
      :templates => output_dir
    })
    
    # Setup Thor paths
    DocJs.source_root(Configs.root)
    self.destination_root = Configs.output

    yes_no = "(y|n)"
    
    Logger.info "We need some information from you, to customize the scaffolding process to your needs."    
    if yes? "Do you wan't to generate a docjs.yml? #{yes_no}"
      configure(Configs.wdir + '/docjs.yml', {
        'templates' => output_dir,
        'output'    => 'docs',
        'logfile'   => 'logfile.log',
        'loglevel'  => 'info'
      })
    end
        
    # Work with the answers    
    Logger.info "Copying the template files to #{Configs.templates}"
    directory 'templates', Configs.templates    # copy templates and resources
        
    Logger.info "Copying the included *.rb files to #{Configs.includes}"    
  end
  
  

  desc "tokens TEMPLATE_PATH?", "Lists all supported tokens\nNeeds your TEMPLATE_PATH to include your own custom tokens. If TEMPLATE_PATH is ommitted, only the default-tokens will be shown"
  set_options :details => 
                 { :type => :boolean, :default => false }
  def tokens(template_path = nil)
  
    load_templates template_path
  
    say "Supported tokens:\n\n"
    if options.details?
      table = [%w(TOKEN AREA TEMPLATE DESCRIPTION)] + Token::Handler.handlers.map{|k,v| [":#{k}",v.area, v.template, v.description] }.sort
    else
      table = Token::Handler.handlers.map{|k,v| [":#{k}","# #{v.description}"] }.sort
    end
    print_table table, :ident => 2, :colwidth => 20
  end
  
  
  
  desc "generators TEMPLATE_PATH?", "Lists all registered generators\nNeeds your TEMPLATE_PATH to include your own generators."
  def generators(template_path = nil)
    
    load_templates template_path
    
    say "Registered Generators:"
    
    gen_table = Generator::Generator.all.map{|gen| ["#{gen.name}","# #{gen.description}"] }.sort
    
    print_table gen_table, :ident => 2, :colwidth => 40    
  end 
end

if ARGV.size == 0
  ARGV.unshift 'help'
  
elsif not (ARGV.size > 0 and DocJs.method_defined?(ARGV.first))
  ARGV.unshift 'docjs'
end

DocJs.start(ARGV)